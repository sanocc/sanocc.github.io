<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速安装Wget  -Win10</title>
      <link href="/posts/50e41b64.html"/>
      <url>/posts/50e41b64.html</url>
      
        <content type="html"><![CDATA[<h1 id="快速安装Wget-Win10"><a href="#快速安装Wget-Win10" class="headerlink" title="快速安装Wget  -Win10"></a>快速安装Wget  -Win10</h1><p>使用管理员权限进入CMD</p><h3 id="安装choco"><a href="#安装choco" class="headerlink" title="安装choco"></a>安装choco</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;chocolatey.org&#x2F;install.ps1&#39;))&quot; &amp;&amp; SET &quot;PATH&#x3D;%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319174159.png" alt=""></p><h3 id="检查Choco安装版本"><a href="#检查Choco安装版本" class="headerlink" title="检查Choco安装版本"></a>检查Choco安装版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319174232.png" alt=""></p><h3 id="开始装wget"><a href="#开始装wget" class="headerlink" title="开始装wget"></a>开始装wget</h3><p><strong>输入</strong>以下代码，等待途中输入Y确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install wget</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319174408.png" alt=""></p><h3 id="验证是否装好wget"><a href="#验证是否装好wget" class="headerlink" title="验证是否装好wget"></a>验证是否装好wget</h3><p><strong>输入</strong> wget -V 。记得V 是大写字母哈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -V</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319174535.png" alt=""><br>安装结束，下面开始你的表演吧~</p><hr><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>wget -P 目录 网址<br>举例来说，如果你要放到/root底下，你可以打下列的指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -P &#x2F;root 网址</span><br><span class="line">wget -P D:\data http:&#x2F;&#x2F;www.xdown.com&#x2F;xxx.zip</span><br><span class="line">wget -O &quot;D:\xxx.zip&quot; http:&#x2F;&#x2F;www.xdown.com&#x2F;xxx.zip</span><br></pre></td></tr></table></figure><p>用wget下载东西，它会自动重连并断点续传。让人很放心。<br>经常要下载一个网站或网站的某个目录。<br>下载一个目录，例如下载网站<a href="http://www.example.com/目录mydir下的所有内容" target="_blank" rel="noopener">www.example.com/目录mydir下的所有内容</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">命令如下：</span><br><span class="line">wget -r -p -k -np -nc -e robots&#x3D;off http:&#x2F;&#x2F;www.example.com&#x2F;mydir&#x2F;</span><br><span class="line">如果要想下载整个网站，最好去除-np参数。   </span><br><span class="line">wget -r -p -k -nc -e robots&#x3D;off http:&#x2F;&#x2F;www.example.com&#x2F;mydir&#x2F;</span><br><span class="line"> </span><br><span class="line">-r 递归；对于HTTP主机，wget首先下载URL指定的文件，然后（如果该文件是一个HTML文档的话）递归下载该文件所引用（超级连接）的所有文件（递 归深度由参数-l指定）。对FTP主机，该参数意味着要下载URL指定的目录中的所有文件，递归方法与HTTP主机类似。   </span><br><span class="line">-c 指定断点续传功能。实际上，wget默认具有断点续传功能，只有当你使用别的ftp工具下载了某一文件的一部分，并希望wget接着完成此工作的时候，才 需要指定此参数。</span><br><span class="line"> </span><br><span class="line">-nc 不下载已经存在的文件</span><br><span class="line">-np 表示不追溯至父目录，不跟随链接，只下载指定目录及子目录里的东西；</span><br><span class="line">-p 下载页面显示所需的所有文件。比如页面中包含了图片，但是图片并不在&#x2F;yourdir目录中，而在&#x2F;images目录下，有此参数，图片依然会被正常下 载。</span><br><span class="line"> </span><br><span class="line">-k 修复下载文件中的绝对连接为相对连接，这样方便本地阅读。</span><br><span class="line">-o down.log 记录日记到down.log</span><br><span class="line">-e robots&#x3D;off 忽略robots.txt</span><br></pre></td></tr></table></figure><h2 id="详情参数"><a href="#详情参数" class="headerlink" title="详情参数"></a>详情参数</h2><h3 id="Wget-的使用"><a href="#Wget-的使用" class="headerlink" title="Wget 的使用"></a>Wget 的使用</h3><p>1）支持断点下传功能<br>2）同时支持FTP和HTTP下载方式<br>3）支持代理服务器<br>4）设置方便简单<br>5）程序小，完全免费；<br>命令格式： wget [参数列表] [目标软件、网页的网址]</p><h4 id="1、启动类参数"><a href="#1、启动类参数" class="headerlink" title="1、启动类参数"></a>1、启动类参数</h4><p>这一类参数主要提供软件的一些基本信息；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-V,–version 显示软件版本号然后退出；</span><br><span class="line">-h,–help显示软件帮助信息；</span><br><span class="line">-e,–execute&#x3D;COMMAND 执行一个 “.wgetrc”命令</span><br></pre></td></tr></table></figure><p>以上每一个功能有长短两个参数，长短功能一样，都可以使用。需要注意的是，这里的-e参数是执行一个.wgettrc的命令，.wgettrc命令其实是一个参数列表，直接将软件需要的参数写在一起就可以了。</p><h4 id="2、文件处理参数"><a href="#2、文件处理参数" class="headerlink" title="2、文件处理参数"></a>2、文件处理参数</h4><p>这类参数定义软件log文件的输出方式等；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-o,–output-file&#x3D;FILE 将软件输出信息保存到文件；</span><br><span class="line">-a,–append-output&#x3D;FILE将软件输出信息追加到文件；</span><br><span class="line">-d,–debug显示输出信息；</span><br><span class="line">-q,–quiet 不显示输出信息；</span><br><span class="line">-i,–input-file&#x3D;FILE 从文件中取得URL；</span><br></pre></td></tr></table></figure><p>以上参数对于攻击者比较有用，我们来看看具体使用；<br>例1：下载192.168.1.168首页并且显示下载信息<br>wget -d<a href="http://192.168.1.168" target="_blank" rel="noopener">http://192.168.1.168</a></p><p>例2：下载192.168.1.168首页并且不显示任何信息<br>wget -q<a href="http://192.168.1.168" target="_blank" rel="noopener">http://192.168.1.168</a></p><p>例3：下载filelist.txt中所包含的链接的所有文件<br>wget -i filelist.txt</p><p>wget -np -m -l5 <a href="http://note.sancx.com">http://note.sancx.com</a> //不下载本站所链接的其它站点内容，5级目录结构</p><h4 id="3、下载参数"><a href="#3、下载参数" class="headerlink" title="3、下载参数"></a>3、下载参数</h4><p>下载参数定义下载重复次数、保存文件名等；<br>-t,–tries=NUMBER 是否下载次数（0表示无穷次）<br>-O –output-document=FILE下载文件保存为别的文件名<br>-nc, –no-clobber 不要覆盖已经存在的文件<br>-N,–timestamping只下载比本地新的文件<br>-T,–timeout=SECONDS 设置超时时间<br>-Y,–proxy=on/off 关闭代理</p><p>例：下载192.168.1.168的首页并将下载过程中的的输入信息保存到test.htm文件中<br>wget -o test.htm <a href="http://192.168.1.168" target="_blank" rel="noopener">http://192.168.1.168</a></p><h4 id="4、目录参数"><a href="#4、目录参数" class="headerlink" title="4、目录参数"></a>4、目录参数</h4><p>目录参数主要设置下载文件保存目录与原来文件（服务器文件）的目录对应关系；<br>-nd –no-directories 不建立目录<br>-x,–force-directories 强制建立目录<br>可能现在我们对这里的目录还不是很了解，我们来看一个举例</p><p>例：下载192.168.1.168的首页，并且保持网站结构<br>wget -x <a href="http://192.168.1.168" target="_blank" rel="noopener">http://192.168.1.168</a></p><h4 id="5、HTTP参数"><a href="#5、HTTP参数" class="headerlink" title="5、HTTP参数"></a>5、HTTP参数</h4><p>HTTP参数设置一些与HTTP下载有关的属性；<br>–http-user=USER设置HTTP用户<br>–http-passwd=PASS设置HTTP密码<br>–proxy-user=USER设置代理用户<br>–proxy-passwd=PASS设置代理密码</p><p>以上参数主要设置HTTP和代理的用户、密码；</p><h4 id="6、递归参数设置"><a href="#6、递归参数设置" class="headerlink" title="6、递归参数设置"></a>6、递归参数设置</h4><p>在下载一个网站或者网站的一个目录的时候，我们需要知道的下载的层次，这些参数就可以设置；<br>-r,–recursive 下载整个网站、目录（小心使用）<br>-l,–level=NUMBER 下载层次</p><p>例：下载整个网站<br>wget -r <a href="http://192.168.1.168" target="_blank" rel="noopener">http://192.168.1.168</a></p><h4 id="7、递归允许与拒绝选项参数"><a href="#7、递归允许与拒绝选项参数" class="headerlink" title="7、递归允许与拒绝选项参数"></a>7、递归允许与拒绝选项参数</h4><p>下载一个网站的时候，为了尽量快，有些文件可以选择下载，比如图片和声音，在这里可以设置；</p><p>-A,–accept=LIST 可以接受的文件类型<br>-R,–reject=LIST拒绝接受的文件类型<br>-D,–domains=LIST可以接受的域名<br>–exclude-domains=LIST拒绝的域名<br>-L,–relative 下载关联链接<br>–follow-ftp 只下载FTP链接<br>-H,–span-hosts 可以下载外面的主机<br>-I,–include-directories=LIST允许的目录<br>-X,–exclude-directories=LIST 拒绝的目录</p><h3 id="如何设定wget所使用的代理服务器"><a href="#如何设定wget所使用的代理服务器" class="headerlink" title="如何设定wget所使用的代理服务器"></a>如何设定wget所使用的代理服务器</h3><p>wget可以使用用户设置文件”.wgetrc”来读取很多设置，我们这里主要利用这个文件来是<br>设置代理服务器。使用者用什么用户登录，那么什么用户主目录下的”.wgetrc”文件就起<br>作用。例如，“root”用户如果想使用”.wgetrc”来设置代理服务器，”/root/.wgetrc”就起<br>作用，下面给出一个”.wgetrc”文件的内容，读者可以参照这个例子来编写自己的”wgetrc”文件：<br>http-proxy = 111.111.111.111:8080<br>ftp-proxy = 111.111.111.111:8080<br>这两行的含义是，代理服务器IP地址为：111.111.111.111，端口号为：80。第一行指定<br>HTTP协议所使用的代理服务器，第二行指定FTP协议所使用的代理服务器。</p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wget </tag>
            
            <tag> 下载插件神器 </tag>
            
            <tag> 文件下载 </tag>
            
            <tag> 网站下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs安装及环境变量配置-Win10</title>
      <link href="/posts/1db87a14.html"/>
      <url>/posts/1db87a14.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nodejs安装及环境变量配置-Win10"><a href="#Nodejs安装及环境变量配置-Win10" class="headerlink" title="Nodejs安装及环境变量配置-Win10"></a>Nodejs安装及环境变量配置-Win10</h1><p>现在的前端开发已经离不开nodejs，其中的npm（或yarn）包管理工具更是带来很好的开发体验是。本文将简单介绍nodejs的安装及环境变量的配置，方便在更换电脑后重新配置node的查阅。<br><em>本文适用window 10</em><br>_</p><hr><h3 id="Nodejs下载及安装"><a href="#Nodejs下载及安装" class="headerlink" title="_Nodejs下载及安装"></a>_Nodejs下载及安装</h3><ul><li><input checked="" disabled="" type="checkbox"> 官网下载对应系统安装包 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Nodejs最新版下载</a>；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173538.png" alt=""><br>安装时注意修改安装目录，建议放在非C盘目录下，最好不要带有中文的文件夹，一路默认安装即可；</p><ul><li><input checked="" disabled="" type="checkbox"> 安装后检查；</li></ul><p>安装完成后启动命令行工具（CMD），输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>查看安装版本，出现提示版本信息即为安装成功 。<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173624.png" alt=""></p><p>说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install 模块名 [-g] 的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。本文是将 &gt; <code>nodejs</code> 安装在 &gt; <code>D:\RuanJian\NodeJS</code> 目录下,以下操作可根据实际安装目录情况进行对应调整。</p><ol><li>在安装目录下，如 <code>D:\RuanJian\NodeJS</code> 新建两个文件夹 <code>node_global</code>(全局包存放目录) 和 <code>node_cache</code>(缓存目录)；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173706.png" alt=""></p><ol start="2"><li>打开命令行工具，执行以下两句操作：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\RuanJian\NodeJS\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\RuanJian\NodeJS\node_cache&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置环境变量：</li></ol><ul><li><p>打开系统属性-高级-环境变量，在系统变量中新建 变量名：<code>NODE_PATH</code>,变量值：<code>D:\RuanJian\NodeJS\node_global\node_modules</code>;</p><pre><code>![](https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173753.png)</code></pre></li><li><p>编辑用户变量的 <code>path</code>，将默认的 <code>C</code> 盘下 <code>APPData/Roaming\npm</code> 修改为 <code>D:\RuanJian\NodeJS\node_global</code>；</p><pre><code>![](https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173824.png)</code></pre></li><li><p>保存即可。</p></li></ul><hr><h2 id="国内备用源：淘宝NPM镜像"><a href="#国内备用源：淘宝NPM镜像" class="headerlink" title="国内备用源：淘宝NPM镜像"></a>国内备用源：淘宝NPM镜像</h2><p>由于国内网络环境限制问题，使用 &gt; <code>npm</code> 安装包时，会遇到时间长，甚至安装失败的问题，建议使用淘宝镜像，具体方法参见官网 &gt; <a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像官网</a><br>可使用官方推荐的 <em>cnpm</em> 命令行工具代替默认的 <code>npm</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org&#96;</span><br></pre></td></tr></table></figure><p>注意：有时使用 cnpm 安装的路径可能回存在问题，在使用react-native开发应用时会出现问题。此时可以使用nrm切换淘宝源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx nrm use taobao</span><br><span class="line">&#x2F;&#x2F; 以下方式切换回官方源</span><br><span class="line">npx nrm use npm</span><br></pre></td></tr></table></figure><hr><p>END</p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图文教程 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo修改永久链接的默认格式</title>
      <link href="/posts/84b12bae.html"/>
      <url>/posts/84b12bae.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo修改永久链接的默认格式"><a href="#Hexo修改永久链接的默认格式" class="headerlink" title="Hexo修改永久链接的默认格式"></a>Hexo修改永久链接的默认格式</h1><h2 id="修改永久链接的默认格式"><a href="#修改永久链接的默认格式" class="headerlink" title="修改永久链接的默认格式"></a>修改永久链接的默认格式</h2><p>Hexo的永久链接的默认格式是 :year/:month/:day/:title/，比如访问站点下某一篇文章时，其路径是 2018/04/12/xxxx/，如果我们的文章标题是中文的，那么该路径就会出现中文字符。<br>在路径中出现了中文字符很容易引发各种问题，而且也不利于seo，因为路径包含了年月日三个层级，层级太深不利于百度蜘蛛抓取。<br>解决办法就是利用其它的插件来生成唯一的路径，这样就算我们的文件标题随意修改，而不会导致原本的链接失效而造成站点下存在大量的死链。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在站点根目录使用 git bash 执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h4 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h4><p>打开根目录下的 _config.yml 文件，修改如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line"># permalink_defaults:</span><br><span class="line">permalink: posts&#x2F;:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line"> alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line"> rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><p>这里将页面都添加了 .html 的后缀，用来伪装成静态页面(虽说Hexo的页面本身就是静态页面)，这样可以直接从路径就知道这是个静态页面，方便seo。</p><p>接下来重新生成，部署，预览。<br>可以看到我们的文章路径变成了 /posts/xxxxx.html，接下来就算我们将文字标题命名为中文也没问题了。</p><hr><p><strong>根目录下输入</strong><br><strong><code>hexo clean</code>**</strong>清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。**<br><strong><code>hexo g</code>**</strong>生成静态网页，然后输入**<br><strong><code>hexo s</code>**</strong>可以本地预览效果，最后输入**<br><strong><code>hexo d</code>**</strong>上传到github上。**<br><strong>这时打开你的github.io主页就能看到发布的文章啦</strong></p><hr><h2 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h2><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。<br>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。<br>然后打开<code>D:\WEB\BLOG\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。<br>编写完markdown文件后，生成，部署，预览。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo永久链接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链接格式 </tag>
            
            <tag> 美化链接 </tag>
            
            <tag> Hexo美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+jsDelivr+GitHub搭建免费cdn加速图床</title>
      <link href="/posts/c16832e9.html"/>
      <url>/posts/c16832e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="PicGo-jsDelivr-GitHub搭建免费cdn加速图床"><a href="#PicGo-jsDelivr-GitHub搭建免费cdn加速图床" class="headerlink" title="PicGo+jsDelivr+GitHub搭建免费cdn加速图床"></a>PicGo+jsDelivr+GitHub搭建免费cdn加速图床</h1><h2 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h2><p>PicGo下载地址: <a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/picgo/releases</a><br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319174658.png" alt=""></p><h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319174747.png" alt=""><br>创建完成后点击右上方我的头像，进入Settings设置<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319175008.png" alt=""><br>然后进行选择Developer settings<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319175717.png" alt=""><br>再点Personal access tokens；点击Generate new tokens<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319175759.png" alt="">然后填写信息<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319175959.png" alt=""><br>复制生成的token,（再关闭网页这个token就没法复制了）<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319180052.png" alt=""></p><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319180202.png" alt=""><br>设定自定义域名：它的的作用是，在图片上传后，PicGo会按照【自定义域名+上传的图片名】的方式生成访问链接，放到粘贴板上。<br>因为我们要使用jsDelivr加速访问，所以可以设置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;github用户名&#x2F;图床仓库名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 加速图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> jsDelivr </tag>
            
            <tag> GitHub </tag>
            
            <tag> CDN加速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建详细图文教程-Win10</title>
      <link href="/posts/f3b61b38.html"/>
      <url>/posts/f3b61b38.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建详细图文教程-Win10"><a href="#Hexo搭建详细图文教程-Win10" class="headerlink" title="Hexo搭建详细图文教程-Win10"></a>Hexo搭建详细图文教程-Win10</h1><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181633.png" alt=""></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo - 快速、简洁且高效的博客框架<br>本搭建教程是不需要自有服务器的，只需要注册个Github账号就可以，完全免（Bai）费（Piao）主要是托管在Github上面。如果比较在意独立域名以及访问速度等等，可以花钱的哈~</p><h2 id="本地环境配置搭建"><a href="#本地环境配置搭建" class="headerlink" title="本地环境配置搭建"></a>本地环境配置搭建</h2><h4 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h4><p><a href="https://note.sancx.com/posts/1db87a14.html">详细的安装教程</a>前面已经写好了，这里就不在过多的叙述了，请移步~</p><h4 id="2-安装Git及连接到Github"><a href="#2-安装Git及连接到Github" class="headerlink" title="2.安装Git及连接到Github"></a>2.安装Git及连接到Github</h4><p><a href="https://note.sancx.com/posts/83dcefb7.html">详细的安装教程</a>前面已经写好了，这里就不在过多的叙述了，请移步~</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>进入D盘创建一个文件夹，命名为BLOG（你随意）这个文件夹就是用来放博客所有文件的地方。进入文件夹后，按住Shift键同时右键鼠标。</p><h4 id="1-首先来安装博客框架"><a href="#1-首先来安装博客框架" class="headerlink" title="1.首先来安装博客框架"></a>1.首先来安装博客框架</h4><p>点在此处打开PowerShell窗口(S) ，使用npm命令来安装Hexo安装后会有几个WARN报错，直接无视它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181727.png" alt=""></p><h4 id="2-然后验证安装成功的版本"><a href="#2-然后验证安装成功的版本" class="headerlink" title="2.然后验证安装成功的版本"></a>2.然后验证安装成功的版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181822.png" alt=""></p><h4 id="3-然后进行初始化Hexo"><a href="#3-然后进行初始化Hexo" class="headerlink" title="3.然后进行初始化Hexo"></a>3.然后进行初始化Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181853.png" alt=""></p><h4 id="4-安装npm依赖插件"><a href="#4-安装npm依赖插件" class="headerlink" title="4.安装npm依赖插件"></a>4.安装npm依赖插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181938.png" alt=""></p><h4 id="5-生成Hexo静态网页"><a href="#5-生成Hexo静态网页" class="headerlink" title="5.生成Hexo静态网页"></a>5.生成Hexo静态网页</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182042.png" alt=""></p><h4 id="6-开启本地服务器进行预览"><a href="#6-开启本地服务器进行预览" class="headerlink" title="6.开启本地服务器进行预览"></a>6.开启本地服务器进行预览</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182131.png" alt=""></p><h4 id="7-浏览器进行浏览"><a href="#7-浏览器进行浏览" class="headerlink" title="7.浏览器进行浏览"></a>7.浏览器进行浏览</h4><p>打开浏览器输入网址 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182214.png" alt=""><br>如果想关闭本地预览，Ctrl+C 或者 关闭命令窗口</p><hr><h2 id="Hexo常用命令汇总"><a href="#Hexo常用命令汇总" class="headerlink" title="Hexo常用命令汇总"></a>Hexo常用命令汇总</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;一个新的文章名字&quot;    #这是创建新的文章的命令</span><br><span class="line">hexo g    #生成静态网页</span><br><span class="line">hexo s    #启动本地服务</span><br><span class="line">hexo d    #部署到github或别地方</span><br><span class="line"></span><br><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br></pre></td></tr></table></figure><h2 id="简写命令汇总"><a href="#简写命令汇总" class="headerlink" title="简写命令汇总"></a>简写命令汇总</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo n “文章名” &#x3D;&#x3D; hexo new “文章名” #新建名为“文章名”的文章</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate #生成</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server #启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><h2 id="Hexo美化"><a href="#Hexo美化" class="headerlink" title="Hexo美化"></a>Hexo美化</h2><p>看到这个博客是不是瞬间无爱，简直是丑爆了。我们可以更换喜欢的主题哦，网上教程有很多，大神们也可以自己制作哦，下面转移到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题网站</a>。</p><hr><p>END</p>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程连接 </tag>
            
            <tag> 图文教程 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建详细教程Windows10</title>
      <link href="/posts/6dd28e9b.html"/>
      <url>/posts/6dd28e9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建及部署Github外网访问详细教程Win10"><a href="#Hexo搭建及部署Github外网访问详细教程Win10" class="headerlink" title="Hexo搭建及部署Github外网访问详细教程Win10"></a>Hexo搭建及部署Github外网访问详细教程Win10</h1><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319204808.png" alt=""></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo - 快速、简洁且高效的博客框架。<br>       本搭建教程是不需要自有服务器的，只需要注册个Github账号就可以，完全免（Bai）费（Piao）主要是托管在Github上面。如果比较在意独立域名以及访问速度等等，可以花钱的哈~</p><hr><h2 id="Nodejs安装及环境变量配置"><a href="#Nodejs安装及环境变量配置" class="headerlink" title="Nodejs安装及环境变量配置"></a>Nodejs安装及环境变量配置</h2><h3 id="Nodejs下载及安装"><a href="#Nodejs下载及安装" class="headerlink" title="_Nodejs下载及安装"></a>_Nodejs下载及安装</h3><ul><li><input checked="" disabled="" type="checkbox"> 官网下载对应系统安装包 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Nodejs最新版下载</a>；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173538.png" alt=""><br>安装时注意修改安装目录，建议放在非C盘目录下，最好不要带有中文的文件夹，一路默认安装即可；</p><ul><li><input checked="" disabled="" type="checkbox"> 安装后检查；</li></ul><p>安装完成后启动命令行工具（CMD），输入以下检查代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>查看安装版本，出现提示版本信息即为安装成功 。<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173624.png" alt=""></p><h4 id="更换NPM全局模块路径"><a href="#更换NPM全局模块路径" class="headerlink" title="更换NPM全局模块路径"></a>更换NPM全局模块路径</h4><p>这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install 模块名 [-g] 的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。本文是将 &gt; <code>nodejs</code> 安装在 &gt; <code>D:\RuanJian\NodeJS</code> 目录下,以下操作可根据实际安装目录情况进行对应调整。</p><ol><li>在安装目录下，如 <code>D:\RuanJian\NodeJS</code> 新建两个文件夹 <code>node_global</code>(全局包存放目录) 和 <code>node_cache</code>(缓存目录)；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173706.png" alt=""></p><ol start="2"><li>打开命令行工具，执行以下两句操作：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\RuanJian\NodeJS\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\RuanJian\NodeJS\node_cache&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置环境变量：</li></ol><ul><li><p>打开系统属性-高级-环境变量，在系统变量中新建 变量名：<code>NODE_PATH</code>,变量值：<code>D:\RuanJian\NodeJS\node_global\node_modules</code>;</p><pre><code>![](https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173753.png)</code></pre></li><li><p>编辑用户变量的 <code>path</code>，将默认的 <code>C</code> 盘下 <code>APPData/Roaming\npm</code> 修改为 <code>D:\RuanJian\NodeJS\node_global</code>；</p><pre><code>![](https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319173824.png)</code></pre></li><li><p>保存即可。</p></li></ul><hr><h4 id="国内备用源：淘宝NPM镜像"><a href="#国内备用源：淘宝NPM镜像" class="headerlink" title="国内备用源：淘宝NPM镜像"></a>国内备用源：淘宝NPM镜像</h4><p>由于国内网络环境限制问题，使用 &gt; <code>npm</code> 安装包时，会遇到时间长，甚至安装失败的问题，建议使用淘宝镜像，具体方法参见官网 &gt; <a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像官网</a><br>可使用官方推荐的 <em>cnpm</em> 命令行工具代替默认的 <code>npm</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org&#96;</span><br></pre></td></tr></table></figure><p>注意：有时使用 cnpm 安装的路径可能回存在问题，在使用react-native开发应用时会出现问题。此时可以使用nrm切换淘宝源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx nrm use taobao</span><br><span class="line">&#x2F;&#x2F; 以下方式切换回官方源</span><br><span class="line">npx nrm use npm</span><br></pre></td></tr></table></figure><hr><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181633.png" alt=""></p><p>进入D盘创建一个文件夹，命名为BLOG（你随意）这个文件夹就是用来放博客所有文件的地方。进入文件夹后，按住Shift键同时右键鼠标。</p><h3 id="1-首先来安装博客框架"><a href="#1-首先来安装博客框架" class="headerlink" title="1.首先来安装博客框架"></a>1.首先来安装博客框架</h3><p>点在此处打开PowerShell窗口(S) ，使用npm命令来安装Hexo安装后会有几个WARN报错，直接无视它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181727.png" alt=""></p><p>然后验证安装成功的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181822.png" alt=""></p><p>然后进行初始化Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181853.png" alt=""></p><p>安装npm依赖插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319181938.png" alt=""></p><p>生成Hexo静态网页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182042.png" alt=""></p><p>开启本地服务器进行预览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182131.png" alt=""></p><p>浏览器进行浏览</p><p>打开浏览器输入网址 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182214.png" alt=""><br>如果想关闭本地预览，Ctrl+C 或者 关闭命令窗口</p><hr><h3 id="Hexo常用命令汇总"><a href="#Hexo常用命令汇总" class="headerlink" title="Hexo常用命令汇总"></a>Hexo常用命令汇总</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;一个新的文章名字&quot;    #这是创建新的文章的命令</span><br><span class="line">hexo new page &quot;名字&quot;     #新建一个页面如about等</span><br><span class="line">hexo g    #生成静态网页</span><br><span class="line">hexo s    #启动本地服务</span><br><span class="line">hexo d    #部署到github或别地方</span><br><span class="line"></span><br><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br></pre></td></tr></table></figure><h3 id="简写命令汇总"><a href="#简写命令汇总" class="headerlink" title="简写命令汇总"></a>简写命令汇总</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo n “文章名” &#x3D;&#x3D; hexo new “文章名” #新建名为“文章名”的文章</span><br><span class="line">hexo n page &quot;名字&quot; &#x3D;&#x3D; hexo new page &quot;名字&quot;     #新建一个页面如about等</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate #生成</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server #启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><h3 id="Hexo美化"><a href="#Hexo美化" class="headerlink" title="Hexo美化"></a>Hexo美化</h3><p>看到这个博客是不是瞬间无爱，简直是丑爆了。我们可以更换喜欢的主题哦，网上教程有很多，大神们也可以自己制作哦，下面转移到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题网站</a>。</p><hr><h2 id="Hexo修改永久链接的默认格式"><a href="#Hexo修改永久链接的默认格式" class="headerlink" title="Hexo修改永久链接的默认格式"></a>Hexo修改永久链接的默认格式</h2><p>Hexo的永久链接的默认格式是 :year/:month/:day/:title/，比如访问站点下某一篇文章时，其路径是 2018/04/12/xxxx/，如果我们的文章标题是中文的，那么该路径就会出现中文字符。</p><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319204858.png" alt=""></p><p>在路径中出现了中文字符很容易引发各种问题，而且也不利于seo，因为路径包含了年月日三个层级，层级太深不利于百度蜘蛛抓取。</p><p>解决办法就是利用其它的插件来生成唯一的路径，这样就算我们的文件标题随意修改，而不会导致原本的链接失效而造成站点下存在大量的死链。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在站点根目录使用 git bash 执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h3 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h3><p>打开根目录下的 _config.yml 文件，修改如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line"># permalink_defaults:</span><br><span class="line">permalink: posts&#x2F;:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line"> alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line"> rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319210637.png" alt=""></p><p>这里将页面都添加了 .html 的后缀，用来伪装成静态页面(虽说Hexo的页面本身就是静态页面)，这样可以直接从路径就知道这是个静态页面，方便seo。</p><p>接下来重新生成，部署，预览。</p><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319210817.png" alt=""></p><p>可以看到我们的文章路径变成了 /posts/xxxxx.html，接下来就算我们将文字标题命名为中文也没问题了。</p><hr><p><strong>根目录下输入</strong><br><strong><code>hexo clean</code>**</strong>清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。**<br><strong><code>hexo g</code>**</strong>生成静态网页，然后输入**<br><strong><code>hexo s</code>**</strong>可以本地预览效果，最后输入**</p><hr><h2 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h2><p>首先在博客根目录下右键打开git bash，安装一个扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;article title&quot;  &#x3D;&#x3D;&#x3D;新建一篇文章</span><br></pre></td></tr></table></figure><p>然后打开<code>D:\WEB\BLOG\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。<br>编写完markdown文件后，生成，部署，预览。</p><h2 id="Git安装教程及连接Github-Win10"><a href="#Git安装教程及连接Github-Win10" class="headerlink" title="Git安装教程及连接Github -Win10"></a>Git安装教程及连接Github -Win10</h2><h3 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h3><p>进入官网下载区域，找到与自己系统相适应的版本进行<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载</a>；<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184117.png" alt=""></p><p>另一个简单的方法是安装 GitHub Desktop。 该安装程序包含图形化和命令行版本的 Git。 它也能支持 Powershell，提供了稳定的凭证缓存和健全的换行设置。 稍后我们会对这方面有更多了解，现在只要一句话就够了，这些都是你所需要的。 你可以在 GitHub for Windows 网站<a href="https://desktop.github.com/" target="_blank" rel="noopener">下载</a>。<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184308.png" alt=""></p><h4 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h4><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/202003191845131.png" alt=""><br>完全的自动安装，直接一路Next…</p><h4 id="测试检查"><a href="#测试检查" class="headerlink" title="测试检查"></a>测试检查</h4><p>在cmd窗口中，输入git显示如下就是安装成功啦！<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184557.png" alt=""></p><h3 id="Git连接Github"><a href="#Git连接Github" class="headerlink" title="Git连接Github"></a>Git连接Github</h3><p>首先在<a href="https://github.com" target="_blank" rel="noopener">Github</a>上注册一个账号。<br>在右键菜单里点Git Bash Here<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184639.png" alt=""><br>在打开的窗口输入，设置user.name和user.email配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后生成ssh秘钥文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后按回车键，进行下一步，继续回车（三次左右）<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184713.png" alt=""></p><p>进入C:\Users\sance.ssh就可以看到2个文件</p><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184743.png" alt=""><br>打开id_rsa.pub,将里面所有的内容全部复制出来。<br>进入<a href="https://github.com/settings/keys" target="_blank" rel="noopener">Github设置SSH key</a>点New SSH key<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184816.png" alt=""></p><p>Title随便输入自己方便辨识就可以了，Key粘贴刚才从id_rsa.pub,将里面复制的所有内容，然后点击Add SSH key</p><h3 id="测试Github连接"><a href="#测试Github连接" class="headerlink" title="测试Github连接"></a>测试Github连接</h3><p>在Git Bash中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br><span class="line"></span><br><span class="line">稍后输入yes</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184847.png" alt=""><br>这么显示，就是连接成功啦~</p><hr><h2 id="Hexo部署到Github详细教程"><a href="#Hexo部署到Github详细教程" class="headerlink" title="Hexo部署到Github详细教程"></a>Hexo部署到Github详细教程</h2><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>登录到<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>,<br>点击GitHub中的New repository创建新仓库，<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182355.png" alt=""></p><p>仓库名应该为：用户名.<a href="https://link.zhihu.com/?target=http%3A//github.io">github.io</a> 这个<strong>用户名</strong>使用你的GitHub帐号名称，这是固定写法！！<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182446.png" alt=""><br>如图所示，然后点击 <code>Create repository</code> 就完成了新仓库的创建。</p><p>进入新仓库，点击<code>Settings</code>，<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182739.png" alt=""></p><p>向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182816.png" alt=""><br>进入主题模板选择，这里随便选一个都可以，我这里选的是默认的哈，然后点击<code>Select theme</code><br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182904.png" alt=""></p><h3 id="推送本地Hexo到Github上"><a href="#推送本地Hexo到Github上" class="headerlink" title="推送本地Hexo到Github上"></a>推送本地Hexo到Github上</h3><p>接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319183048.png" alt=""></p><p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319183124.png" alt=""></p><p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;用户名&#x2F;用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>保存站点配置文件。<br>其实就是给hexo d 这个命令做相应的配置，让Hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这时，我们分别输入三条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。</p><h2 id="完成预览"><a href="#完成预览" class="headerlink" title="完成预览"></a>完成预览</h2><p>打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 用户名.github.io还可以绑定自有域名<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319183305.png" alt=""></p><hr><p>END</p>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo搭建 </tag>
            
            <tag> 部署Github </tag>
            
            <tag> 详细教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署到Github详细教程-Win10</title>
      <link href="/posts/1ad5be0d.html"/>
      <url>/posts/1ad5be0d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo部署到Github详细教程-Win10"><a href="#Hexo部署到Github详细教程-Win10" class="headerlink" title="Hexo部署到Github详细教程-Win10"></a>Hexo部署到Github详细教程-Win10</h1><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2><p>登录到<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>,<br>点击GitHub中的New repository创建新仓库，<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182355.png" alt=""></p><p>仓库名应该为：用户名.<a href="https://link.zhihu.com/?target=http%3A//github.io">github.io</a> 这个<strong>用户名</strong>使用你的GitHub帐号名称，这是固定写法！！<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182446.png" alt=""><br>如图所示，然后点击 <code>Create repository</code> 就完成了新仓库的创建。</p><p>进入新仓库，点击<code>Settings</code>，<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182739.png" alt=""></p><p>向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182816.png" alt=""><br>进入主题模板选择，这里随便选一个都可以，我这里选的是默认的哈，然后点击<code>Select theme</code><br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319182904.png" alt=""></p><h2 id="推送本地Hexo到Github上"><a href="#推送本地Hexo到Github上" class="headerlink" title="推送本地Hexo到Github上"></a>推送本地Hexo到Github上</h2><p>接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319183048.png" alt=""></p><p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319183124.png" alt=""></p><p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;用户名&#x2F;用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>保存站点配置文件。<br>其实就是给hexo d 这个命令做相应的配置，让Hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这时，我们分别输入三条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。</p><h2 id="完成预览"><a href="#完成预览" class="headerlink" title="完成预览"></a>完成预览</h2><p>打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 用户名.github.io<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319183305.png" alt=""></p><hr><p>END</p>]]></content>
      
      
      <categories>
          
          <category> 部署Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 连接Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> 远程部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git安装教程及连接Github -Win10</title>
      <link href="/posts/83dcefb7.html"/>
      <url>/posts/83dcefb7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git安装教程及连接Github-Win10"><a href="#Git安装教程及连接Github-Win10" class="headerlink" title="Git安装教程及连接Github -Win10"></a>Git安装教程及连接Github -Win10</h1><h2 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h2><p>进入官网下载区域，找到与自己系统相适应的版本进行<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载</a>；<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184117.png" alt=""></p><p>另一个简单的方法是安装 GitHub Desktop。 该安装程序包含图形化和命令行版本的 Git。 它也能支持 Powershell，提供了稳定的凭证缓存和健全的换行设置。 稍后我们会对这方面有更多了解，现在只要一句话就够了，这些都是你所需要的。 你可以在 GitHub for Windows 网站<a href="https://desktop.github.com/" target="_blank" rel="noopener">下载</a>。<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184308.png" alt=""></p><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/202003191845131.png" alt=""><br>完全的自动安装，直接一路Next…</p><h2 id="测试检查"><a href="#测试检查" class="headerlink" title="测试检查"></a>测试检查</h2><p>在cmd窗口中，输入git显示如下就是安装成功啦！<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184557.png" alt=""></p><h2 id="Git连接Github"><a href="#Git连接Github" class="headerlink" title="Git连接Github"></a>Git连接Github</h2><p>首先在<a href="https://github.com" target="_blank" rel="noopener">Github</a>上注册一个账号。<br>在右键菜单里点Git Bash Here<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184639.png" alt=""><br>在打开的窗口输入，设置user.name和user.email配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后生成ssh秘钥文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后按回车键，进行下一步，继续回车（三次左右）<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184713.png" alt=""></p><p>进入C:\Users\sance.ssh就可以看到2个文件</p><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184743.png" alt=""><br>打开id_rsa.pub,将里面所有的内容全部复制出来。<br>进入<a href="https://github.com/settings/keys" target="_blank" rel="noopener">Github设置SSH key</a>点New SSH key<br><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184816.png" alt=""></p><p>Title随便输入自己方便辨识就可以了，Key粘贴刚才从id_rsa.pub,将里面复制的所有内容，然后点击Add SSH key</p><h2 id="测试Github连接"><a href="#测试Github连接" class="headerlink" title="测试Github连接"></a>测试Github连接</h2><p>在Git Bash中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br><span class="line"></span><br><span class="line">稍后输入yes</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sanocc/PicGoCDN/img/20200319184847.png" alt=""><br>这么显示，就是连接成功啦~</p><hr><p>END</p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git安装 </tag>
            
            <tag> 远程连接 </tag>
            
            <tag> 连接Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL学习-常用命令及语法</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQL学习-常用命令及语法"><a href="#SQL学习-常用命令及语法" class="headerlink" title="SQL学习-常用命令及语法"></a>SQL学习-常用命令及语法</h1><h2 id="常用的语法"><a href="#常用的语法" class="headerlink" title="常用的语法"></a>常用的语法</h2><p>SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。<br>查询和更新指令构成了 SQL 的 DML 部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT - 从数据库表中获取数据</span><br><span class="line">UPDATE - 更新数据库表中的数据</span><br><span class="line">DELETE - 从数据库表中删除数据</span><br><span class="line">INSERT INTO - 向数据库表中插入数据</span><br></pre></td></tr></table></figure><p>SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。<br>我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。<br>SQL 中最重要的 DDL 语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE - 创建新数据库</span><br><span class="line">ALTER DATABASE - 修改数据库</span><br><span class="line">CREATE TABLE - 创建新表</span><br><span class="line">ALTER TABLE - 变更（改变）数据库表</span><br><span class="line">DROP TABLE - 删除表</span><br><span class="line">CREATE INDEX - 创建索引（搜索键）</span><br><span class="line">DROP INDEX - 删除索引</span><br></pre></td></tr></table></figure><h2 id="SQL-SELECT-语句"><a href="#SQL-SELECT-语句" class="headerlink" title="SQL SELECT 语句"></a>SQL SELECT 语句</h2><p>SELECT 语句用于从表中选取数据。<br>结果被存储在一个结果表中（称为结果集）。</p><h3 id="SQL-SELECT-语法"><a href="#SQL-SELECT-语法" class="headerlink" title="SQL SELECT 语法"></a>SQL SELECT 语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名称 FROM 表名称</span><br></pre></td></tr></table></figure><p>以及：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名称</span><br></pre></td></tr></table></figure><p>注释：* 指的是所有；SQL 语句对大小写不敏感。SELECT 等效于 select。</p>]]></content>
      
      
      <categories>
          
          <category> SQL学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> 基本语法 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
